
#------------------------------------------------------------------------------
# NOTE: inspired by https://github.com/getantidote/zdotdir
#------------------------------------------------------------------------------



#--------------------------------------------------------
# Logical flow for zshrc
#--------------------------------------------------------
# - Early Performance/Optimizations (like skip_global_compinit, zprof)
# - Locale Settings (LANG, LC_ALL)
# - Path Configurations (typeset -U path)
# - Editors and Paginated Tools Config (nvim, bat, fzf configurations)
# - Completion Configuration (compinit)
# - Tool Initializations like Homebrew, fnm, bun, uv
# - Load Homebrew environment first.
# - Shell Options/Enhancements (history, shell behaviors, zoxide, atuin, etc.)
# - Functions and Aliases
# - Final Commands or Misc Tools
#

# Explanation of Key Updates
# Path Configuration Cleanup:
#
# Centralized all paths into one path array declaration for cleaner handling. Removed duplicate or redundant export PATH statements.
# Editor and Pager Setup:
#
# Consolidated MANPAGER settings so you can choose between bat-enhanced showing of man pages or nvim (uncomment one).
# Completion Initialization:
#
# Deferred compinit to run later after all paths and editor settings are defined. This avoids unnecessary re-initialization.
# Tool Initializations and Conditional Loading:
#
# Included conditional checks for optional tools like bun and uv to only load them if present.
# Modularity:
#
# Suggested keeping large alias and function definitions in separate files like aliases.zsh and functions.zsh, allowing cleaner .zshrc and easier debugging/updating.
# Aliases:
#
# Reorganized aliases into logical sections, making it easier to locate and modify shell, filesystem, git, dev tool, and Docker-related commands.
# History and Options:
#
# Placed history and zsh option configurations toward the middle to ensure that all prior settings are saved correctly in history.
# Closing Remarks:
# This structure optimizes shell performance, ensures modularity through separate sourcing of aliases and functions, and guarantees the necessary tools follow the correct path resolution and locale setup. Future customization will be easier by logically maintaining functions/aliases externally.

# TODO: zsh plugin manager (?) 
# - https://github.com/zap-zsh/zap
# - antidote

# TODO: https://www.reddit.com/r/zsh/comments/11v07m1/how_to_set_up_zshrc_to_be_used_on_macos_homebrew/

#------------------------------------------------------------------------------
# Early Performance Settings
#------------------------------------------------------------------------------

# PERFORMANCE: Skip automatic global compinit (completion system initialization) from /etc/zshrc
# Why? 1. Prevents duplicate initialization (macOS runs it twice by default)
#      2. Lets us control when completions load (we'll do it ourselves in .zshrc)
#      3. Can significantly speed up shell startup (20-100ms+)
# Details: Completion system (compinit) loads available command completions, but it's 
#          expensive. Better to run it once, deliberately, after other configs are loaded.
# Docs: https://zsh.sourceforge.io/Doc/Release/Completion-System.html
skip_global_compinit=1

# Set Zsh opts.
setopt extended_glob

# TODO
# zmodload zsh/zprof  # Uncomment for profiling
#--------------------------------------------------------
# TODO: zprofile should have already run before this (brew shellenv + core env variables)
#--------------------------------------------------------

# zsh env vars
z
# ${ZDOTDIR:-~}/.zshrc

# Set the root name of the plugins files (.txt and .zsh) antidote will use.
zsh_plugins=${ZDOTDIR:-~}/.zsh_plugins

export HOMEBREW_PREFIX="${HOMEBREW_PREFIX:-/opt/homebrew}"

# Set HOMEBREW_PREFIX if not already set
# This uses the ${parameter:-word} syntax -> use "parameter" if set, else use "word"
export HOMEBREW_PREFIX="${HOMEBREW_PREFIX:-/opt/homebrew}"

#------------------------------------------------------------------------------
# Locale (Language/Encoding) Configuration
# - **Locale settings** and global encoding like `LANG` and `LC_ALL` should stay **towards the top** as they define environment behavior early.
#------------------------------------------------------------------------------
# Set UTF-8 as the globally recognized encoding for system-wide compatibility
export LANG='en_US.UTF-8'
export LC_ALL='en_US.UTF-8'


# Core environment-specific non-standard paths
export BUN_INSTALL="$HOME/.bun"
export GLOBAL_PYTHON_VENV="$HOME/src/.python-global"
# export RIPGREP_CONFIG_PATH="$HOME/.ripgreprc"


#------------------------------------------------------------------------------
# PATH Configuration (Unique Paths)
#
# PATHS: Declare path array with unique entries (-U = unique, removes duplicates)
# Why? 1. Maintains clean $PATH without duplicate entries
#      2. More efficient than manual PATH string manipulation
#      3. ZSH-native way to handle paths (better than export PATH=...)
# Usage: path+=(/new/path)  # Add new paths safely, duplicates auto-removed
# (typeset -U path) : a good **Zsh-native way** to handle paths. Make sure the `path` array settings are done once.
# Define **`typeset -U path`** early, include all complex paths, and **avoid repetitive export PATH statements** mid-way through the file (e.g. "export PATH=$BUN_INSTALL/bin:$PATH").
#------------------------------------------------------------------------------
typeset -gU path

# TODO: update to use env-var ($HOMEBREW_PREFIX) which is set by brew installation
# Zsh-native path array handling, avoids duplicate path elements
path=(
    $HOME/.local/bin
    $BUN_INSTALL/bin
    $GLOBAL_PYTHON_VENV/bin
    /opt/homebrew/bin
    $HOME/.cache/lm-studio/bin
    $path # preserve user paths
)


# Initialize path.
# If dirs are missing, they won't be added due to null globbing.
path=(
  $HOME/{,s}bin(N)
  /opt/{homebrew,local}/{,s}bin(N)
  /usr/local/{,s}bin(N)
  $path
)



#------------------------------------------------------------------------------
# Editor and Pager Configuration
#------------------------------------------------------------------------------

# Editors + pagers
export SUDO_EDITOR='nvim'
export EDITOR='nvim'
export VISUAL='nvim'

# bat as a pager for man pages, with syntax highlighting
export MANPAGER="sh -c 'col -bx | bat --paging=always --language=man'"

# Alternatively, if you want to use NeoVim for man pages, uncomment this:
# export MANPAGER="nvim +Man!"

# For using less with color and proper UTF-8 formatting as the default pager:
# Ensure less behaves well with color and UTF-8 content
export LESS='-R -i'
export LESSCHARSET=utf-8
export PAGER='bat --pager=always'  # Bat as the pager for general output

#------------------------------------------------------------------------------
# Tool Configuration and Exports (bat, fzf, ripgrep)
#------------------------------------------------------------------------------

# Fuzzy Find: Set default command for fzf with ripgrep (hidden files included). Use fzf with bat for searching file contents
export FZF_DEFAULT_COMMAND="rg --files --hidden --follow --glob '!.git/*'"
export FZF_CTRL_T_COMMAND="$FZF_DEFAULT_COMMAND"
export FZF_CTRL_T_OPTS="--preview 'bat --style=numbers --color=always --line-range=:500 {}'"
# export FZF_DEFAULT_OPTS='--height 40% --layout=reverse --border'


# TODO: DevToys dev utils (https://devtoys.app/doc/articles/extension-development/getting-started/setup.html?tabs=macos)
# export DevToysGuiDebugEntryPoint="/Applications/DevToys.app/Contents/MacOS/DevToys"
# export DevToysCliDebugEntryPoint="/Applications/DevToys.app/Contents/MacOS/DevToys"

#------------------------------------------------------------------------------
# Completion System Initialization (Load Late to Avoid Reinitialization)

# brew shellenv -> fpath[1,0]="/opt/homebrew/share/zsh/site-functions";
#------------------------------------------------------------------------------
# zsh completions initialization
autoload -Uz compinit
compinit
# if [[ -n ${ZDOTDIR}/.zcompdump(#qN.mh+24) ]]; then
#     compinit;
# else
#     compinit -C;
# fi

# if type brew &>/dev/null; then
#   FPATH=$(brew --prefix)/share/zsh-completions:$FPATH
#
#   autoload -Uz compinit
#   compinit
# fi


#
#------------------------------------------------------------------------------
# Core Dev Tool Initialization (Order Matters)
#------------------------------------------------------------------------------

# Node version manager (fnm) initialization
eval "$(fnm env --use-on-cd --version-file-strategy recursive --shell zsh)"

# Bun (JavaScript runtime) initialization (conditional load)
[ -s "$BUN_INSTALL/_bun" ] && source "$BUN_INSTALL/_bun"

# Universal Python Global Virtual Environment (uv) CLI initialization
eval "$(uv generate-shell-completion zsh)"

# TODO: safer storage + handling secrets auth + credential

#------------------------------------------------------------------------------
# Shell Enhancements (zoxide, history extensions)
#------------------------------------------------------------------------------

# zoxide (enhanced directory navigation)
eval "$(zoxide init zsh)"

# atuin (advanced shell history management)
eval "$(atuin init zsh)"

# temporal (measure and log command duration times)
eval "$(temporal completion zsh)"

# Starship prompt setup (load prompt last)
eval "$(starship init zsh)"


# TODO: uv python cli (global virtualenv venv as workaround)
# Create global venv (if not exist)
# uv venv ~/.python-global

#------------------------------------------------------------------------------
# Shell History and Essential Options
# 
# TODO: https://www.reddit.com/r/zsh/comments/11v07m1/how_to_set_up_zshrc_to_be_used_on_macos_homebrew/
#------------------------------------------------------------------------------

# Set history file and size limits
HISTFILE="$HOME/.zsh_history"
HISTSIZE=10000
SAVEHIST=10000

# History and option settings
setopt HIST_IGNORE_DUPS      # Ignore duplicate entries in history
setopt HIST_IGNORE_SPACE     # Ignore commands prefixed by space
setopt HIST_VERIFY           # Edit actions before execution (after Up arrow)

# Zsh navigation tweaks
setopt AUTO_CD               # Automatically `cd` when typing a directory name
setopt AUTO_PUSHD            # Automatically push directories onto the stack
setopt PUSHD_IGNORE_DUPS     # Ignore duplicate directories in the stack
setopt EXTENDED_GLOB         # Enable advanced globbing in Zsh

#------------------------------------------------------------------------------
# Custom Functions (Separate File Sourcing for Modularity)
#------------------------------------------------------------------------------

# TODO: Source external modular functions
# source "$ZDOTDIR/functions.zsh"  # Source functions defined elsewhere

# zsh reload with chezmoi changes
function reload() {
    
}

# Use fzf + bat for filtering large output files (e.g., logs, big text files)
function fbat() {
  bat --paging=always "$1" | fzf
}

function rebuild_zsh_completions() {
    rm -f ~/.zcompdump; compinit
}

# yazi helper function
function y() {
	local tmp="$(mktemp -t "yazi-cwd.XXXXXX")" cwd
	yazi "$@" --cwd-file="$tmp"
	if cwd="$(command cat -- "$tmp")" && [ -n "$cwd" ] && [ "$cwd" != "$PWD" ]; then
		builtin cd -- "$cwd"
	fi
	rm -f -- "$tmp"
}

#------------------------------------------------------------------------------
# Custom Aliases for Productivity (Organized by Sections)
#------------------------------------------------------------------------------

# Stream large data using bat + fzf
alias flog='fzf --preview "bat --style=numbers --color=always --line-range=:500 {}"'
alias falias='alias | fzf'

# Fuzzy man page search
alias fman='man -k . | fzf --preview "man {}"'

############
# use modern alternatives
############
# Use bat by default for viewing files
alias cat='bat --paging=always'
alias grep='rg'
alias find='fd'
alias md='glow'

# Git shortcuts
alias gs='git status'
alias ga='git add'
alias gc='git commit'
alias gp='git push'
alias gl='git pull'
alias lg='lazygit'  # Run lazygit

# TODO: Github Copilot (ghc + ghce function)

# Filesystem navigation shortcuts using exa
# TODO: --group-directories-first
# TODO: --color=auto
alias ls='eza --icons'
alias ll='eza -l --icons'
alias la='eza -al --icons'

# Docker shortcuts
alias dc='docker-compose'
alias dps='docker ps'

# Zsh+Chezmoi shortcuts for managing dotfiles
alias ze="chezmoi edit ~/.zshrc --apply"
alias zs="chezmoi apply -v ~/.zshrc"

# rebuild_zsh_completions
alias zcompreset="rm -f ~/.zcompdump; compinit"

# Chezmoi shortcuts for managing dotfiles
alias cm="chezmoi"
alias cma="chezmoi add"
alias cmra="chezmoi re-add"
alias cmf="chezmoi forget"
alias cmap="chezmoi apply"
# managed code
alias cmsrc="chezmoi source-path"
# actual code
alias cmdst="chezmoi source-path"
alias cm="chezmoi"
alias cmls="chezmoi managed"
# should not use below if chezmoi works
# alias _ze="$EDITOR ~/.zshrc"
# alias _zs="source ~/.zshrc"

# Homebrew operations
alias b="brew"

alias bh="brew home"
alias bx="brew commands"
alias bupd="brew update"
alias bupg="brew upgrade"
alias bdoc="brew doctor"
alias bclean="brew cleanup --prune=all"

alias bpull="bupd && bupg && bclean"
alias bui="brew uninstall"
alias bls="brew list -1"
alias bu="brew update"
alias bin="brew install"
alias brein="brew reinstall"
alias bi="brew info"
alias bo="brew outdated"
alias bsd="brew search --eval-all --desc"


# Homebrew Cask operations
alias bcl="brew list --cask"
alias bcin="brew install --cask"
alias bcup="brew upgrade --cask"

# Homebrew Bundle operations
alias bb="brew bundle"
alias bbhelp="brew bundle -h"
alias bbcat="brew bundle list --all --global --verbose"
alias bbin="brew bundle install --all --global --verbose"
alias bbls="brew bundle dump --all --file=- --verbose"
alias bbsave="brew bundle dump --all --verbose --global -f && chezmoi re-add ~/.Brewfile"
alias bbcheck="brew bundle check --all --global  --verbose"

#------------------------------------------------------------------------------
# TODO: Sourcing Additional Files/External Scripts (For Modularity)
#------------------------------------------------------------------------------

alias gdl='cd ~/Downloads'
alias gcf='cd ~/.config/'


alias uvgn="uv venv $GLOBAL_PYTHON_VENV"
alias uvg="source $GLOBAL_PYTHON_VENV/bin/activate"

#------------------------------------------------------------------------------
# TODO: command cheatsheet (use cheat CLI command)
#------------------------------------------------------------------------------
# $ ln -s ~/.config/zsh/.zshrc ~/.zshrc
# $ nvim <file>	Opens NeoVim in the terminal to edit the given file.
# $ cat <file>	bat-enhanced cat, uses pagination and syntax highlighting.
# $ fbat <file>	Use bat + fzf to filter and preview large files interactively.
# $ flog <file>	Stream logs using fzf while previewing sections of large log files.
# $ fman	fzf-based man page search: Quickly search and preview man pages, select using fuzzy find and preview.
# $ man <command>	Opens bat-enhanced man pages with syntax highlighting and nice paging.



#------------------------------------------------------------------------------
# init zsh completions ---> may not need this (use Warp)
#------------------------------------------------------------------------------
# autoload -U compinit; compinit

# inspo
# - https://www.reddit.com/r/zsh/comments/11v07m1/how_to_set_up_zshrc_to_be_used_on_macos_homebrew/
# Source any plugins installed via homebrew if found.
: ${HOMEBREW_PREFIX:=$(brew --prefix 2>/dev/null)}
zsh_plugins=(
  $HOMEBREW_PREFIX/etc/bash-completion/completions/git-extras(N)
  $HOMEBREW_PREFIX/share/zsh-autopair/autopair.zsh(N)
  $HOMEBREW_PREFIX/opt/zsh-fast-syntax-highlighting/share/zsh-fast-syntax-highlighting/fast-syntax-highlighting.plugin.zsh(N)
  $HOMEBREW_PREFIX/share/zsh-autosuggestions/zsh-autosuggestions.zsh(N)
)
for zfile in $zsh_plugins; source $zfile

# Cleanup.
unset zsh_plugins zfile


# https://github.com/zsh-users/zsh-syntax-highlighting
source /opt/homebrew/share/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh

# https://github.com/zsh-users/zsh-autosuggestions
source /opt/homebrew/share/zsh-autosuggestions/zsh-autosuggestions.zsh
# source $(brew --prefix)/share/zsh-autosuggestions/zsh-autosuggestions.zsh

# https://github.com/hlissner/zsh-autopair
source /opt/homebrew/share/zsh-autopair/autopair.zsh

# https://github.com/zsh-users/zsh-history-substring-search
source /opt/homebrew/share/zsh-history-substring-search/zsh-history-substring-search.zsh

# https://zsh-abbr.olets.dev/installation.html
# source /opt/homebrew/share/zsh-abbr@6/zsh-abbr.zsh
source /opt/homebrew/share/zsh-abbr/zsh-abbr.zsh

# TODO: zsh-autosuggestions + zsh-abbr integration (https://github.com/olets/zsh-autosuggestions-abbreviations-strategy)
source /opt/homebrew/share/zsh-autosuggestions-abbreviations-strategy/zsh-autosuggestions-abbreviations-strategy.zsh

